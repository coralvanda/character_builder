import tkinter
from tkinter import messagebox


class race(object):
	
	def __init__(self):
		self.base_strength = 1
		self.base_dexterity = 1
		self.base_constitution = 1
		self.base_intelligence = 1
		self.base_wisdom = 1
		
	def print_race_base_stats(self):
		return ('Str: ' + str(self.base_strength) + " "
			'Dex: ' + str(self.base_dexterity) + " "
			'Con: ' + str(self.base_constitution) + " "
			'Int: ' + str(self.base_intelligence) + " "
			'Wis: ' + str(self.base_wisdom))


class human(race):
	
	def __init__(self):
		self.base_strength = 5
		self.base_dexterity = 5
		self.base_constitution = 5
		self.base_intelligence = 5
		self.base_wisdom = 5
		
	def print_race(self):
		return 'Human'
	

class elf(race):

	def __init__(self):
		self.base_strength = 3
		self.base_dexterity = 7
		self.base_constitution = 3
		self.base_intelligence = 7
		self.base_wisdom = 5
	
	def print_race(self):
		return 'Elf'


class dwarf(race):

	def __init__(self):
		self.base_strength = 7
		self.base_dexterity = 3
		self.base_constitution = 7
		self.base_intelligence = 2
		self.base_wisdom = 6
	
	def print_race(self):
		return 'Dwarf'
	
	
class orc(race):

	def __init__(self):
		self.base_strength = 7
		self.base_dexterity = 6
		self.base_constitution = 6
		self.base_intelligence = 2
		self.base_wisdom = 4

	def print_race(self):
		return 'Orc'
	
	
class character(object):
	
	def __init__(self):
		self.name = 'Nemo'
		self.level = 1
		self.race = human()
		self.health = None
		self.mana = None
		self.available_stat_points = None
		self.spend_stat_points = None
	
	def print_char(self):
		char_printout = ('Name: ' + str(self.name) + '\n' 
						'Level: ' + str(self.level) + '\n' 
						'Race: ' + str(self.race.print_race()) + '\n' 
						'Health: ' + str(self.health) + '\n' 
						'Mana: ' + str(self.mana) + '\n' 
						'Available stat points: ' + str(self.available_stat_points) + '\n' 
						'Stats: ' + str(self.race.print_race_base_stats()))
		messagebox.showinfo('Your character', char_printout)
	
	def calc_stat_points(self):
		return self.level*5 - self.spent_stat_points

		
my_first_character = character()
		
		
# *** Main window ***

window = tkinter.Tk()
window.title('RPG character builder')
width = 150     # controls how wide the window is
height = 200    # controls how tall the window is
window.geometry(str(width * 2) + "x" + str(height * 3)) # sizes the window
#window.wm_iconbitmap('guildEmblem.ico')


# *** Status bar ***

status = tkinter.Label(window, text="Building a character...", bd=1, 
					   relief=tkinter.SUNKEN, anchor=tkinter.W)
status.pack(side=tkinter.BOTTOM, fill='x')


#*** Frames ***
top_frame = tkinter.Frame(window, background="bisque")
top_frame.pack(side=tkinter.TOP, fill='both', expand=True)

top_left_frame = tkinter.Frame(top_frame, bg="blue")
top_left_frame.pack(side=tkinter.LEFT, fill='both')

top_right_frame = tkinter.Frame(top_frame, bg="red")
top_right_frame.pack(side=tkinter.RIGHT, fill='both')

bottom_frame = tkinter.Frame(window, bg="green")
bottom_frame.pack(side=tkinter.BOTTOM, fill='both', expand=True)


def do_nothing():
    print("I won't do anything")
	

# *** Dropdown menu ***

my_menu = tkinter.Menu(window)
window.config(menu=my_menu)

sub_menu = tkinter.Menu(my_menu)
my_menu.add_cascade(label="File", menu=sub_menu)
sub_menu.add_command(label="New character", command=do_nothing)
sub_menu.add_command(label="Load existing character", command=do_nothing)
sub_menu.add_command(label="Save character", command=do_nothing)
sub_menu.add_separator()
sub_menu.add_command(label="Exit", command=window.destroy)

edit_menu = tkinter.Menu(my_menu)
my_menu.add_cascade(label="Edit", menu=edit_menu)
edit_menu.add_command(label="Edit character", command=do_nothing)


#*** Character name entry ***

def confirm_char_name(event):
	my_first_character.name = name_entry.get()

char_name = tkinter.StringVar()
name_lbl = tkinter.Label(top_left_frame, text="Enter character name")
name_entry = tkinter.Entry(top_left_frame, textvariable=char_name)
confirm_name_button = tkinter.Button(top_left_frame, text='Confirm name')
confirm_name_button.bind("<Button-1>", confirm_char_name) # when the button is left clicked

name_lbl.pack()
name_entry.pack()
confirm_name_button.pack()


# *** Race option menu ***

races = ['Human', 'Elf', 'Dwarf', 'Orc']

race_var = tkinter.StringVar()
race_var.set(races[0]) # sets default value

race_drop_down = tkinter.OptionMenu(top_left_frame, race_var, *races)
race_drop_down.pack()

def confirm_race():
	temp_race_var = race_var.get()
	if temp_race_var == 'Human':
		my_first_character.race = human()
	elif temp_race_var == 'Elf':
		my_first_character.race = elf()
	elif temp_race_var == 'Dwarf':
		my_first_character.race = dwarf()
	else:
		my_first_character.race = orc()

confirm_race_button = tkinter.Button(top_left_frame, text="Confirm race", 
									 command=confirm_race)
confirm_race_button.pack()


# *** Level selector ***

def select_level():
	selected_level = "Level " + str(level.get())
	level_label.config(text = selected_level)
	my_first_character.level = level.get()

level = tkinter.IntVar()
level_scale = tkinter.Scale(top_left_frame, variable=level, sliderlength=10, 
							from_=1, to=60, orient=tkinter.HORIZONTAL)
level_scale.pack()

level_confirm_button = tkinter.Button(top_left_frame, 
									  text="Confirm level", command=select_level)
level_confirm_button.pack()

level_label = tkinter.Label(top_left_frame)
level_label.pack()


#*** Stat incrementors ***

def confirm_stats():
	#TODO: Need to modify stats and availabled/used stat point variables
	if available_stat_points < 0:
		messagebox.showinfo("Error", "Insufficient available stat points.")


base_stat = 1
max_stat = 250
pady_num = 1

str_stat = tkinter.IntVar()
str_stat.set(50)
str_stat_lbl = tkinter.Label(top_right_frame, text="Strength")
str_stat_lbl.grid(row=0, column=0, sticky=tkinter.E, pady=pady_num)
str_incrementor = tkinter.Spinbox(top_right_frame, width=4, 
								  from_=base_stat, to=max_stat, 
								  textvariable=str_stat, state='readonly')
str_incrementor.grid(row=0, column=1, pady=pady_num)
strength = str_incrementor.get()

dex_stat = tkinter.IntVar()
dex_stat_lbl = tkinter.Label(top_right_frame, text="Dexterity")
dex_stat_lbl.grid(row=1, column=0, sticky=tkinter.E, pady=pady_num)
dex_incrementor = tkinter.Spinbox(top_right_frame, width=4, 
								  from_=base_stat, to=max_stat, 
								  textvariable=dex_stat, state='readonly')
dex_incrementor.grid(row=1, column=1, pady=pady_num)
dexterity = dex_incrementor.get()

con_stat = tkinter.IntVar()
con_stat_lbl = tkinter.Label(top_right_frame, text="Constitution")
con_stat_lbl.grid(row=2, column=0, sticky=tkinter.E, pady=pady_num)
con_incrementor = tkinter.Spinbox(top_right_frame, width=4, 
								  from_=base_stat, to=max_stat, 
								  textvariable=con_stat, state='readonly')
con_incrementor.grid(row=2, column=1, pady=pady_num)
constitution = con_incrementor.get()

int_stat = tkinter.IntVar()
int_stat_lbl = tkinter.Label(top_right_frame, text="Intelligence")
int_stat_lbl.grid(row=3, column=0, sticky=tkinter.E, pady=pady_num)
int_incrementor = tkinter.Spinbox(top_right_frame, width=4, 
								  from_=base_stat, to=max_stat, 
								  textvariable=int_stat, state='readonly')
int_incrementor.grid(row=3, column=1, pady=pady_num)
intelligence = int_incrementor.get()

wis_stat = tkinter.IntVar()
wis_stat_lbl = tkinter.Label(top_right_frame, text="Wisdom")
wis_stat_lbl.grid(row=4, column=0, sticky=tkinter.E, pady=pady_num)
wis_incrementor = tkinter.Spinbox(top_right_frame, width=4, 
								  from_=base_stat, to=max_stat, 
								  textvariable=wis_stat, state='readonly')
wis_incrementor.grid(row=4, column=1, pady=pady_num)
wisdom = wis_incrementor.get()

confirm_stats_button = tkinter.Button(top_right_frame, 
									  text='Confirm stats', command=confirm_stats)
confirm_stats_button.grid(row=5, columnspan=10, pady=pady_num)


#*** Health and Mana totals ***

health = 50 #+ ((constitution * int(level.get())-1) / 2)
mana = 50 #+ ((intelligence + wisdom * int(level.get())-1) / 2)
stat_points = 10

health_label = tkinter.Label(bottom_frame, text="Health", relief=tkinter.SUNKEN)
health_label.grid(row=0, column=0, sticky=tkinter.E)

health_total = tkinter.Listbox(bottom_frame, height=1, width=10)
health_total.insert(1, str(health))
health_total.grid(row=0, column=1)

mana_label = tkinter.Label(bottom_frame, text="Mana", relief=tkinter.SUNKEN)
mana_label.grid(row=1, column=0, sticky=tkinter.E)

mana_total = tkinter.Listbox(bottom_frame, height=1, width=10)
mana_total.insert(1, str(mana))
mana_total.grid(row=1, column=1)


#*** Stat points available ***

stat_points_label = tkinter.Label(bottom_frame, text="Avaiable stat points", relief=tkinter.SUNKEN)
stat_points_label.grid(row=2, column=0, sticky=tkinter.E)

stat_points_count = tkinter.Listbox(bottom_frame, height=1, width=10)
stat_points_count.insert(1, str(stat_points))
stat_points_count.grid(row=2, column=1)


#*** Print char ***
print_char_button = tkinter.Button(bottom_frame, text='Print Character',
								   command=my_first_character.print_char)
print_char_button.grid(row=3)


# *** Messagebox ***
messagebox.showinfo('Character builder', 'Use this program to build your character')
answer = messagebox.askquestion('Begin building?', 'Are you ready to get started?')
if answer == 'yes':
    print "Let's begin"
else:
	window.destroy()


window.mainloop()
